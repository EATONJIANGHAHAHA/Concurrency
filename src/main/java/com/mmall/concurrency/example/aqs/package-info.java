package com.mmall.concurrency.example.aqs;

/*
AbstractQueuedSynchronizer - AQS,内部的实现由一个双向列表, 负责维护线程的执行顺序,并且可能存在多个conditionQueue, 这是一个单向列表,
只有当程序中需要使用到condition的时候才会被建立.
1. Node实现FIFO队列, 可以用于构建锁或者其他同步装置的基础框架.
2. 利用了一个int表示了状态, 在大多数同步装置里面这个变量表示了: 0 = 没有线程获取了锁, 1 = 已经有线程获取了锁, > 1 = 存入的锁的数量.
3. 使用的方法是继承
4. 子类需要通过继承并实现他的方法管理其状态, acquire() 和 release() 操纵状态.
5. 可以同时实现排它锁和共享锁模式 (独占, 共享)

CountDownLatch组件:同步辅助类,这个组件允许阻塞调用它的线程,可以使一个线程或多个线程阻塞,在其他线程完成任务后再继续执行这个线程的后续工作.
它的计数器不可以被重置.
它的使用主要是由两个方法组成:
1. countDown(), 这个类里面有一个计数器,负责统计已经被调用的线程总数.当一个线程执行完毕他的任务或者达到条件后,
用户手动调用这个方法递减组件里面的计数器.
2. await(), 调用这个方法的线程将被祖塞, 等待计数器递减为0后,被阻塞线程被激活并继续执行后续代码.
 */